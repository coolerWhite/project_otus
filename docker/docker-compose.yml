version: '3'
services:
  app-ui:
    build:
      context: search_engine_ui
      dockerfile: Dockerfile
    image: project-otus/app-ui:latest
    container_name: search_engine_ui
    environment:
      MONGO: mongo
      MONGO_PORT: 27017
      MONGODB_DATABASE: SEARCH
      # MONGODB_USERNAME: root
      # MONGODB_PASSWORD: example
      MONGODB_HOSTNAME: mongodb
    volumes:
      - ui-data:/var/www
    depends_on:
      - mongo
      # - rabbit
    networks:
      - ui-net
      - cralwer-net
  
  # app-bk:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile-bk
  #   environment:
  #     - MONGO = //mongo
  #     - MONGO_PORT = 27017
  #     - RMQ_HOST = rabbitmq
  #     - RMQ_QUEUE =
  #     - RMQ_USERNAME = rmuser
  #     - RMQ_PASSWORD = rmpassword
  #     - CHECK_INTERVAL = 
  #     - EXCLUDE_URLS =
  #   ports:
  #     - 81:8081
  #   volumes:
  #     - ".:/app-bk"
  #   depends_on:
  #     - mongo
  #     - rabbit
  
  mongo:
    image: mongo
    container_name: mongodb
    # image: project-otus/mongodb:latest
    restart: always
    # You use the command property to define the command that will be executed when the container is started
    # will disable logging into the MongoDB shell without credentials, which will secure MongoDB by requiring authentication
    command: mongod --auth
    environment:
      # MONGO_INITDB_ROOT_USERNAME: root
      # MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: SEARCH
      MONGODB_DATA_DIR: /data/db
      MONDODB_LOG_DIR: /dev/null
    volumes: 
      - mongo-data:/data/db
    networks:
      - ui-net
      # - cralwer-net

  webserver:
    build:
      context: nginx
      dockerfile: Dockerfile
    image: project-otus/nginx:latest
    container_name: webserver-nginx
    restart: unless-stopped
    environment:
      APP_ENV: "prod"
      APP_NAME: "webserver-nginx"
      APP_DEBUG: "false"
      SERVICE_NAME: "webserver-nginx"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - nginx-data:/var/log/nginx
    depends_on:
      - app-ui
    networks:
      - ui-net

networks:
  ui-net:
    driver: bridge
  cralwer-net:
    driver: bridge


volumes:
  ui-data:
    driver: local
  mongo-data:
    driver: local
  nginx-data:
    driver: local
  # rabbit:
  #   image: rabbitmq:3.10.7-management
  #   hostname: rabbitmq
  #   restart: always
  #   environment:
  #     - RABBITMQ_DEFAULT_USER=rmuser
  #     - RABBITMQ_DEFAULT_PASS=rmpassword
  #   volumes:
  #     - ./rabbitmq:/var/lib/rabbitmq
  #   ports:
  #     - 15672:15672