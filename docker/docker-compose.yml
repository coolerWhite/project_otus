---
version: '3'
services:
  app-ui:
    build:
      context: search_engine_ui
      dockerfile: Dockerfile
    image: project-otus/app-ui:latest
    container_name: search_engine_ui
    volumes:
      - ui-data:/var/www
    depends_on:
      - mongo
      - rabbit
    networks:
      - ui-net

  app-crawler:
    build:
      context: search_engine_crawler
      dockerfile: Dockerfile
    image: project-otus/app-crawler:latest
    container_name: search_engine_crawler
    volumes:
      - crawler-data:/search_engine_crawler
    depends_on:
      - mongo
      - rabbit
    networks:
      - crawler-net

  mongo:
    image: mongo
    container_name: mongodb
    restart: always
    # You use the command property to define the command that will be executed when the container is started
    # will disable logging into the MongoDB shell without credentials, which will secure MongoDB by requiring authentication
    command: mongod --auth
    environment:
      # MONGO_INITDB_ROOT_USERNAME: root
      # MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: SEARCH
      MONGODB_DATA_DIR: /data/db
      MONDODB_LOG_DIR: /dev/null
    volumes:
      - mongo-data:/data/db
    networks:
      - ui-net
      - crawler-net

  rabbit:
    image: rabbitmq:3.10.7-management
    hostname: rabbitmq
    restart: always
    environment:
      # RABBITMQ_NODENAME: RABBIT
      RABBITMQ_DEFAULT_USER: rmuser
      RABBITMQ_DEFAULT_PASS: rmpassword
      # RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: -rabbit disk_free_limit 2147483648
    volumes:
      # - ./rabbitmq-data:/var/lib/rabbitmq
      - ./rabbitmq/10-defaults.conf:/etc/rabbitmq/conf.d/10-defaults.conf
      # - ./rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins
      - ./rabbitmq/rabbitmq-defs.json:/etc/rabbitmq/rabbitmq-defs.json
    ports:
      - '15672:15672'
      - '5672:5672'
    networks:
      - ui-net
      - crawler-net

  # webserver:
  #   build:
  #     context: nginx
  #     dockerfile: Dockerfile
  #   image: project-otus/nginx:latest
  #   container_name: webserver-nginx
  #   restart: unless-stopped
  #   environment:
  #     APP_ENV: "prod"
  #     APP_NAME: "webserver-nginx"
  #     APP_DEBUG: "false"
  #     SERVICE_NAME: "webserver-nginx"
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - nginx-data:/var/log/nginx
  #   depends_on:
  #     - app-ui
  #   networks:
  #     - ui-net

networks:
  ui-net:
    driver: bridge
  crawler-net:
    driver: bridge

volumes:
  ui-data:
    driver: local
  crawler-data:
    driver: local
  mongo-data:
    driver: local
  rabbitmq-data:
    driver: local
  # nginx-data:
  #   driver: local
